{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Duroscript",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#punctuation"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.storage.duroscript",
					"match": "\\b(const|var|import|func|as|_)\\b"
				},
				{
					"name": "constant.numeric.boolean.duroscript",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "keyword.control.duroscript",
					"match": "\\b(if|in|else|while|break|match|return|foreach|nextloop)\\b"
				},
				{
					"name": "entity.name.type.duroscript",
					"match": "\\b(type|str|bool|u8|i8|u16|i16|u32|i32|u64|i64|f32|f64|struct|union|enum|tuple|none)\\b"
				}
			]
		},
		"variables": {
			"patterns": [
			  {
				"name": "entity.name.function.duroscript",
				"match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()"
			  },
			  {
				"name": "variable.duroscript",
				"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
			  }
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.duroscript",
					"begin": "(?<!\\$)\"",
					"end": "(?<!\\\\)\"|^\\s*(?=[^`\\s])",
					"patterns": [
						{
							"include": "#stringescapes"
						}
					]
				},
				{
					"name": "string.interpolated.duroscript",
					"begin": "\\$\"",
					"end": "(?<!\\\\)\"|^\\s*(?=[^`\\s])",
					"patterns": [
						{
							"include": "#stringsubescapes"
						},
						{
							"include": "#stringescapes"
						}
					]
				},
				{
					"name": "string.quoted.single.duroscript",
					"match": "'(?:(\\\\x[a-fA-F0-9]{2}|\\\\o[0-7]{3}|\\\\u[a-fA-F0-9]{4}|\\\\U[a-fA-F0-9]{8}|\\\\\\\\|\\\\['ntvrabfe0])||[^\\\\])'",
					"captures": {
						"1": {"name": "constant.character.escape.duroscript"}
					}
				}
			]
		},
		"stringescapes": {
			"patterns": [
				{
					"name": "default.duroscript",
					"match": "(\\n|\\r\\n|$)\\s*`"
				},
				{
					"name": "constant.character.escape.duroscript",
					"match": "\\\\([\\\\\"`ntvrabfe0]|(o[0-7]{3})|(x[0-9a-fA-F]{2})|(u[0-9a-fA-F]{4})|(U[0-9a-fA-F]{8}))"
				},
				{
					"name": "invalid.illegal.unrecognized-string-escape.duroscript",
					"match": "\\\\((o.{3})|(x.{2})|(u.{4})|(U.{8}))"
				},
				{
					"name": "invalid.illegal.unrecognized-string-escape.duroscript",
					"match": "\\\\."
				}
			]
		},
		"stringsubescapes": {
			"patterns": [
				{
					"name": "constant.character.escape.duroscript",
					"match": "\\\\([\\$\\{\\}])"
				},
				{
					"name": "keyword.other.duroscript",
					"match": "\\$\\{\\s*([_a-zA-Z][_a-zA-Z0-9]*)(?:\\s*(:)\\s*([dDxXoObBuUsS]))?\\s*\\}",
					"captures": {
						"1": {"name": "variable.name.duroscript"},
						"2": {"name": "keyword.operator.special.duroscript"},
						"3": {"name": "constant.format.duroscript"}
					}
				},
				{
					"name": "keyword.other.duroscript",
					"match": "\\{\\s*([dDxXoObBuUsS])?\\s*\\}",
					"captures": {
						"1": {"name": "constant.format.duroscript"}
					}
				},
				{
					"name": "invalid.illegal.named-string-replacement.duroscript",
					"match": "\\$\\{[^\\}]*\\}"
				},
				{
					"name": "invalid.illegal.named-string-replacement.duroscript",
					"match": "\\{[^\\}]*\\}"
				},
				{
					"name": "invalid.illegal.named-string-replacement.duroscript",
					"match": "\\$|\\{|\\}"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.duroscript",
					"begin": "#",
					"end": "$"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.logical.duroscript",
					"match": "(\\|\\||&&|\\^\\^|!)"
				},
				{
					"name": "keyword.operator.comparison.duroscript",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.arithmetic.duroscript",
					"match": "(-|\\+|\\*\\*?|\\/\\/?|%)=?"
				},
				{
					"name": "keyword.operator.bitwise.duroscript",
					"match": "(<<|>>|~|&|\\^|\\|)=?"
				},
				{
					"name": "keyword.operator.assignment.duroscript",
					"match": "="
				},
				{
					"name": "keyword.operator.reference.duroscript",
					"match": "@(?=[_a-zA-Z])"
				},
				{
					"name": "keyword.operator.access.duroscript",
					"match": "\\.[@?]?"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.float.duroscript",
					"match": "\\b[0-9][0-9_]*\\.[0-9_]+([eE][\\-+]?[0-9][0-9_]*)?\\b"
				},
				{
					"name": "constant.numeric.decimal.duroscript",
					"match": "\\b[0-9][0-9_]*([eE][\\-+]?[0-9][0-9_]*)?\\b"
				},
				{
					"name": "constant.numeric.hexadecimal.duroscript",
					"match": "\\b-?0x[a-fA-F0-9_]+\\b"
				},
				{
					"name": "constant.numeric.octal.duroscript",
					"match": "\\-?0o[0-7_]+\\b"
				},
				{
					"name": "constant.numeric.binary.duroscript",
					"match": "\\b-?0b[01_]+\\b"
				}
			]
		},
		"punctuation": {
			"patterns": [
			  {
				"name": "punctuation.comma.duroscript",
				"match": ","
			  },
			  {
				"name": "punctuation.separator.key-value.duroscript",
				"match": ":"
			  },
			  {
				"name": "punctuation.terminator.statement.duroscript",
				"match": ";"
			  },
			  {
				"name": "punctuation.separator.key-value.duroscript",
				"match": "=>"
			  }
			]
		}
	},
	"scopeName": "source.duro"
}